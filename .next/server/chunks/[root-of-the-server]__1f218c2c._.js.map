{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":["file:///D:/kumpulan%20codingan/JDA/project_akhir_jda_fase2/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth, { Session, User, AuthOptions } from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\n// import { PrismaClient } from \"../../../generated/prisma\";\r\nimport { PrismaClient } from \"../../../generated/\";\r\nimport bcrypt from \"bcrypt\";\r\n\r\n// Extend the Session and User types to include id and role\r\ndeclare module \"next-auth\" {\r\n  interface Session {\r\n    user: {\r\n      id: string;\r\n      name?: string | null;\r\n      email?: string | null;\r\n      image?: string | null;\r\n      role?: string;\r\n    };\r\n  }\r\n  interface User {\r\n    id: string;\r\n    name?: string | null;\r\n    email?: string | null;\r\n    image?: string | null;\r\n    role?: string;\r\n    password?: string;\r\n  }\r\n}\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nasync function sessionCallback({ session, token }: { session: Session; token: any }) {\r\n  if (token) {\r\n    if (session.user) {\r\n      session.user.id = token.sub ?? \"\";\r\n      session.user.role = typeof token.role === \"string\" ? token.role : undefined;\r\n    }\r\n  }\r\n  return session;\r\n}\r\n\r\nasync function jwtCallback({ token, user }: { token: any; user?: User }) {\r\n  if (user) {\r\n    token.role = user.role;\r\n  }\r\n  return token;\r\n}\r\n\r\nexport const authOptions: AuthOptions = {\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"text\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        const user = await prisma.pengguna.findUnique({\r\n          where: { email: credentials?.email },\r\n        });\r\n\r\n        if (!user || !credentials?.password) return null;\r\n\r\n        const isValid = await bcrypt.compare(credentials.password, user.password);\r\n        if (!isValid) return null;\r\n\r\n        return { id: user.id, name: user.name, email: user.email, role: user.role };\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    session: sessionCallback,\r\n    jwt: jwtCallback,\r\n  },\r\n  pages: {\r\n    signIn: \"/login\",\r\n  },\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n};\r\n\r\nconst handler = NextAuth(authOptions);\r\n\r\nexport { handler as GET, handler as POST };"],"names":[],"mappings":";;;;;AAAA;AACA;;;;;;AAGA;;;;;AAuBA,MAAM,SAAS,IAAI;AAEnB,eAAe,gBAAgB,EAAE,OAAO,EAAE,KAAK,EAAoC;IACjF,IAAI,OAAO;QACT,IAAI,QAAQ,IAAI,EAAE;YAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,GAAG,IAAI;YAC/B,QAAQ,IAAI,CAAC,IAAI,GAAG,OAAO,MAAM,IAAI,KAAK,WAAW,MAAM,IAAI,GAAG;QACpE;IACF;IACA,OAAO;AACT;AAEA,eAAe,YAAY,EAAE,KAAK,EAAE,IAAI,EAA+B;IACrE,IAAI,MAAM;QACR,MAAM,IAAI,GAAG,KAAK,IAAI;IACxB;IACA,OAAO;AACT;AAEO,MAAM,cAA2B;IACtC,WAAW;QACT,CAAA,GAAA,sQAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAO;gBACtC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,MAAM,OAAO,MAAM,OAAO,QAAQ,CAAC,UAAU,CAAC;oBAC5C,OAAO;wBAAE,OAAO,aAAa;oBAAM;gBACrC;gBAEA,IAAI,CAAC,QAAQ,CAAC,aAAa,UAAU,OAAO;gBAE5C,MAAM,UAAU,MAAM,qGAAA,CAAA,UAAM,CAAC,OAAO,CAAC,YAAY,QAAQ,EAAE,KAAK,QAAQ;gBACxE,IAAI,CAAC,SAAS,OAAO;gBAErB,OAAO;oBAAE,IAAI,KAAK,EAAE;oBAAE,MAAM,KAAK,IAAI;oBAAE,OAAO,KAAK,KAAK;oBAAE,MAAM,KAAK,IAAI;gBAAC;YAC5E;QACF;KACD;IACD,WAAW;QACT,SAAS;QACT,KAAK;IACP;IACA,OAAO;QACL,QAAQ;IACV;IACA,SAAS;QACP,UAAU;IACZ;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;AACrC;AAEA,MAAM,UAAU,CAAA,GAAA,mPAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}}]
}